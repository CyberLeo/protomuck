#summary Anatomy of "instructions", the building blocks of MUF.
#sidebar SideBarAnatomy

Instructions are C structs of type `struct inst`. They have three members:
{{{
struct inst {                   /* instruction */
    short   type;
    short   line;
    union {
        ....
    } data
}
}}}

`type` is the most important member. It contains contains the interpreter hint for how the `data` member should be accessed and interacted with. Accessing members of `data` that do not correspond to the current `type` will return uninitialized data and is broken behavior.

==Static Types==
These types do not contain pointers. This is not to say that the `inst` won't contain a hint to something that has to be dereferenced, but in such a case the memory will be freed in such a way that doesn't require tracking a link count.

|| *Type*       || *#* || *Wiki Page*  || *Description* ||
|| PROG_CLEARED ||   0 || ProgCleared  || Contains no initialized data at all. The result of using `CLEAR()` on an inst. ||
|| PROG_INTEGER ||   2 || ProgInteger  || data.number contains a standard C int. ||
|| PROG_FLOAT   ||   3 || ProgFloat    || data.number contains a standard C long. ||
|| PROG_OBJECT  ||   4 || ProgObject   || data.objref contains a `dbref` type, which is a `typedef`'d C integer. ||
|| PROG_VAR     ||   5 || ProgVar      || ||
|| PROG_LVAR    ||   6 || ProgLvar     || ||
|| PROG_SVAR    ||   7 || ProgSvar     || ||


==Pointer Types==
These data types contain memory pointers and maintain a link count. Passing the `inst` through `CLEAR()` will reduce the link count by 1; when the link count reaches zero, the referenced memory will be freed. Failure to pass the `inst` through `CLEAR()` before a primitive finishes will result in memory leaks.

You should always try to `dup` these types on the stack wherever possible for maximum efficiency.

|| *Type*          || *#* || *Wiki Page*    || *Description* ||
|| PROG_STRING     ||   9 || ProgString     || data.string->data contains a pointer to a C string. ||
|| PROG_FUNCTION   ||  10 || ProgFunction   || ||
|| PROG_LOCK       ||  11 || ProgLock       || ||
|| PROG_ADD        ||  12 || ProgAdd        || data.addr contains a pointer to a MUF function. ||
|| PROG_ARRAY      ||  16 || ProgArray      || ||
|| PROG_DICTIONARY ||  17 || ProgDictionary || ||
|| PROG_SOCKET     ||  18 || ProgSocket     || data.muf_socket contains a pointer to a MUF socket. ||
|| PROG_MYSQL      ||  27 || ProgMysql      || ||