Welcome to the ProtoMuck User's Guide!

You can get more help on the following topics:
-----------------------------------------------------
 Topic                                   |Index     |
-----------------------------------------------------
  Basic Commands                         | (index1) |
  Building Commands                      | (index2) |
  Programming Commands                   | (index3) |
  Administrative Commands                | (index4) |
  Object Flags                           | (index5) |
  Miscellaneous                          | (index6) |
  Credits                                | (credits)|
-----------------------------------------------------
Type 'help <index>' to get more help on a topic.

~
~
Credits|credit
Credits (Or, Thanks To)

Moose    - Who worked on the ProtoMUCK revision of the help file,
           made the Proto MPI docs, made many, many additions for
           the new server, fixed multiple bugs.
Akari    - Made many additions for the new server, fixed multiple
           bugs, debugging old libraries, rewrote the MUF manual.
Loki     - Who rewrote the indexing of the help file for ease of
           use, and was one of the creators of NeonMUCK.
Foxen    - For the creation of Fuzzball MUCK, and FB6.
Points   - For a lot of his code work on FB6 based code that we use.
Nodaitsu - Created the file routines we use.

And the billion other people who took part in the creation of the
original TinyMUCK, TinyMUD, TinyMUCKfb, NeonMUCK, and any other
mu* that ProtoMUCK may of derived from.  See '@credits'.

~
~
Basic Commands|index1
Basic Commands

@lock              @name              @owned              @password
@propset           @set               @sweep              @teleport
@unlock            @credits           @version            @doing
take               drop               examine             get
give               go                 gripe               help
home               inventory          look                mpi
news               page               pose                quit
say                score              whisper             who
&                  info

Type 'help <command>' to get more help on a command.

~
~
Building Commands|index2
Building Commands

@ansidescribe      @action            @attach             @chown
@contents          @create            @describe           @dig
@drop              @entrances         @fail               @find
@htmldescribe      @iansidescribe     @idescribe          @ihtmldescribe
@link              @odrop             @ofail              @open
@osuccess          @pecho             @recycle            @stats
@success           @trace             @unlink             drop-to
@destroy           @conlock           @flock

Type 'help <command>' to get more help on a command.

~
~
Programming Commands|index3
Programming Commands

@edit              @kill              @list               @program
@ps                man                

Type 'help <command>' to get more help on a command.

~
~
Administrative Commands|index4
Administrative Commands

@boot              @dump              @fixwizbits         @force
@frob              @hopper            @newpassword        @pcreate
@purge             @shutdown          @usage              @wall
@armageddon        @tune              @toad               @delta
@restart           @sanity            @sanchange          @sanfix
dboot              dinfo              dwall               wizchat

Type 'help <command>' to get more help on a command.

~
~
Object Flags|index5
Object Flags

abode              antiprotect        bogus               builder
chown_ok           dark               examine_ok          haven
hidden             jump_ok            link_ok             parent
protect            quell              silent              sticky
vehicle            wizard             xforceable          zombie             
guest              logwall            mufcount            mobile
command            pueblo             html

Type 'help <command>' to get more help on a command.

~
~
Miscellaneous|index6
Miscellaneous

archwizards        commands           control of objects  dbref
failure            flags              gender              god
here               homes              levels2             linking
mages              mucker levels      newbie              newlevels
object types       objects            outputprefix        outputsuffix
propdirs           strings            substitutions       success
timestamps         wizards            color               www

Type 'help <topic>' to get more help on a topic.


~                               Basic Commands
~
@lock
@lock <object>=<key>

Locks <object> to a specific key(s). <object> can be specified as <name> or
#<number>, or as 'me' or 'here'.  Boolean expressions are allowed, using '&'
(and), '|' (or), '!' (not), and parentheses ('(' and ')') for grouping.  To
lock to a player, prefix their name with '*' (ex. '*Igor').  A key may be a
player, an object, or 'property:value'.

~
@name
@name <object>=<name> [<password>]

Sets the name field of <object> to <name>.  <name> cannot be empty, a null
name is illegal.  <password> must be supplied to rename a player.  Wizards
can rename any player.  On some mucks only Wizards can rename playeres.

~
@OWNED
@owned <name> [= <flags/types> = [<output type>]]

Searches through the database for items that <name> controls.  Flags or
types can be specified to check for or against certain ones.  (A ! before
the flag indicates that it is to be excluded.) A "U" in the flags list
indicates an unlinked item.  The output types that can be specified are
owners, links (which outputs either *UNLINKED*, the object to which the item
is linked, or *METALINK* for exits linked to more than one thing), count,
and location.

Valid flags:  ABCDHJKLMQSW
Flags of E, F, G, P, R, and T will match Exits, programs, Garbage,
Players, Rooms, and Things, respectively.  U will match unlinked
objects.  0-7 will match Mucker Levels.

Example:  @owned Revar=f!l3=location   will list all M3 programs (F)
owned by revar, that are NOT set Link_OK (!L), and it will give the
location of each one.

See @ENTRANCES, @FIND, @CONTENTS.

~
@password
@password <old password>=<new password>.

This changes your password.

~
@set|&
@set <object> = [!] <flag> -or-
@set <object> = <property>: [ <string> ] -or-
@set <object> = <property>: -or-
@set <object> = <property>:[^<number>]
@set <object> =:
&<property> <object>[=<string>]

@set can modify flags, add properties to an object, or remove properties 
from an object.

Using the first format, you may set flags, which are: WIZARD, LINK_OK [LIGHT],
DARK [DEBUG], STICKY [SETUID], JUMP_OK, BUILDER [BOUND], QUELL,
CHOWN_OK [COLOR_ON], MOBILE, MUFCOUNT, EXAMINE_OK, HIDDEN, GUEST,
HAVEN [HARDUID (HIDE)], ABODE [AUTOSTART], PARENT [PROG_DEBUG], PROTECT,
ANTIPROTECT, COMMAND, VEHICLE [VIEWABLE], ZOMBIE, or MUCKER.  You can also
set the MUCKER (or Priority) Level of an object by using 0-8 as the flag name.
You can also set the WIZARD level of an object by using 0-4 as the flag name.

The second format sets <property> on <object> to <string>, or if <string>
is not given, removes <property>.
The &<property> command is used for mush-style property setting.

~
@propset
@propset <object> = <type>:<property>:<value>
 
Propset is used for setting properties other than the normal 'string' type
used by @set.  For example:

@propset me=int:_myint:23
-or-
@propset me=dbref:_reg/tmp:#46

Most players will not need to use this command and will be able to use the
simpler @set form.

Valid types: string, int, float, dbref, lock, and erase.

See @SET.

~
@teleport
@teleport <thing> [=<destination>]

Moves <thing> to <destination>, if <destination> is not given, moves you to
<thing>.  Wizards may teleport anything to anywhere, provided it makes
sense, and mortals are allowed to do two things: teleport rooms to change
their parent fields, and the may teleport things to a room they can link to,
provided they control either the thing or its location.  Players can also
teleport to a JUMP_OK room if they are in a JUMP_OK room.

~
@sweep|scan
@sweep
scan

This shows what listeners are in the room.  For wizards it also lists what
room common actions such as say/pose/whisper/page are on.

~
@unlock
@unlock <object>. Removes the lock on <object>.

See @LOCK.

~
drop|throw|put
drop <thing>

Drops the <thing> if you are holding it.  It moves the object to the room
you are in, unless its STICKY flag is set, or the room has a drop-to. 
Programs are much like objects but are not affected by room droptos or
STICKY flags. A 'drop' message can be set, which will be shown to the player
dropping the object, and an 'odrop', which will be shown to the other
players in the room.  Throw and put are aliased to drop.

See @DROP and @ODROP.

~
examine
examine <object>[=propdir]

If you control <object>, examine will give you a complete breakdown of all
fields, flags, &c that are associated with the object.  If the optional
propdir field is supplied, then it instead lists out all the properties
directly under that propdir.  To list the base propdir of an object, use 'ex
<object>=/'.

Program-executing fields are displayed as their true text, rather than
executing the program in question.  If you do not control <object>, however,
it prints the owner of the object in question, and, again, displays the true
text of the description.

~
get|take
get <object>
take <object>

Attempts to pick up <object>.  The lock on <object> is checked for a
success, and the normal path of success/fail is then taken.  On success the
object is placed in your inventory.

get <container>=<object>

Attempts to get <object> from the given container.  The _/clk lock property
on <container> is tested, and if it is true, then it checks to see if the
standard _/lok lock property on <object> tests true.  If both locks pass,
then <object> is moved into the player's inventory.  If there is no _/clk
property on <container> it defaults to failing.  The _/lok property, on
<object>, on the other hand, defaults to passing. @succ/@fail messages are
not displayed, when fetching something from a container.

~
give
give <player|object>=<amount>

Gives <amount> pennies from your supply to <player>.  Mortals may only give
positive amounts.  Wizards do not affect their penny supplies by giving to
others, and may also give pennies to objects, changing that object's value.

~
go|move|goto
go[to] <direction>
move <direction>
go[to] home

Goes in the specified direction. 'go home' is a special command that returns
you to your starting location.  The word 'go' may be omitted. 'move' is the
same as 'go'.

~
gripe
gripe <message>

Sends <message> to the system maintainer.  Gripes are logged for later
reference; also, if the system maintainer is connected he will receive the
gripe real-time when the gripe is made.

~
help
help [<subject>]

With no arguments, this command returns a brief introduction. When <subject> 
is specified, it returns detailed information on that topic. Seeing as you 
are reading this, you probably already understand how this works.

~
info
info [<subject>]

With no arguments, this command returns a brief topic list. When <subject> 
is specified, it returns detailed information on that topic.

~
home
home

Sends you home, no matter where you are. You retain your pennies, but
any objects you are carrying leave your inventory and return to their own
homes.

See HOMES.

~
inventory
inventory

Lists what you are carrying. This can usually be abbreviated to inv or i.

~
look|read
look <object>

Looks around at the current room, or at <object> if specified.  For players,
displays their description and inventory, for things, their description, and
for rooms, their name, description, succ/fail message, and contents.  Also
triggers osucc/ofail messages on rooms.  Programs are triggered accordingly
on desc/succ/fail fields.

~
mpi|meeper
mpi [<subject>]

Displays help for mpi commands.

~
news
news [<topic>]

Displays the current news file for the game. Must be typed in full. If a
topic is given, then it displays the information on that specific topic.

Most servers have replaced this with some form of global.

~
page
page <player> [=<message>]

This tells a player that you are looking for them.  They will get a message
in the form of 'You sense <pager> is looking for you in <location>.' A
<message> is optional, and is delivered in the form of '<pager> pages:
<message>.' Your location is not revealed in message pages.

If a player is set HAVEN, you cannot page them, and they will not be
notified that you tried. You will instead be told, 'That player does not
wish to be disturbed.'

Note: Most systems use a 'program' with a global 'page' action, which takes
      the place of the built-in 'page' command, and has more features.

~
quit
QUIT

Must be in all capitals, and typed in full. Logs out of your character and
leaves the game. Your character remains at the location you are in when you
log out, although it might be moved elsewhere while you are 'asleep.'

~
say
say <message>
"message

Says <message> out loud. You can also use '"<message>'.

See POSE and WHISPER.

~
pose
pose <message>
:message

Poses <message>, it can also be done with ':<message>'.

This is used for actions.  If your name was Igor, and you typed ':falls
down.', everyone would see "Igor falls down."

See POSE and WHISPER.

~
score
score

Displays how many pennies you have.

~
whisper
whisper <player>=<message>

Whispers the message to the named person, if they are in the same room as
you. No one else can see the message.  Wizards can whisper *<player> =
<message> to whisper to players in other rooms.

Note: Some systems use a program in place of the built in whisper command. 
      These programs generally provide many more useful features.

~
who|@who
WHO [<player>]

Must be in all capitals, and typed in full. Lists the name of every player
currently logged in, their time online, how long since they last did
something, and optionally a @doing phrase of their choosing.  If given a
player name, it displays only the matching names and idle times.

Wizards may type WHO! to see more descriptive information of players online.

The WHO command can easily be replaced with a @WHO action that has a wizard
flag set on it.  However, this will not work for login screens since 

~                             Building Commands
~
@action
@action <name>=<source> [=<regname>] (Builder only.)

Creates a new action and attaches it to the thing, room, or player
specified. If a <regname> is specified, then the _reg/<regname> property on
the player is set to the dbref of the new object.  This lets players refer
to the object as $<regname> (ie: $mybutton) in @locks, @sets, etc.  You may
only attach actions you control to things you control.  Creating an action
costs 1 penny.  The action can then be linked with the command @LINK.

~
@attach
@attach <action>=<new source>

Removes the action from where it was and attaches it to the new source.
You must control the action in question.

~
@chown
@chown <object> [=<player>]

Changes the ownership of <object> to <player>, or if no player is given, to
yourself.  All players are allowed to take possession of objects, rooms, and
actions, provided the CHOWN_OK flag is set. Mortals cannot take ownership of
a room unless they are standing in it, and may not take ownership of an
object unless they are holding it.  Wizards own almost everything.

~
@create
@create <object> [=<cost>[=<regname>]] (Builder only)

Creates a new object and places it in your inventory.  This costs at least
ten pennies.  If <cost> is specified, you are charged that many pennies, and
in return, the object is endowed with a value according to a sepcial
formula.

Usually the maximum value of an object is 100 pennies, which would cost 505
pennies to create. If a <regname> is specified, then the _reg/<regname>
property on the player is set to the dbref of the new object.  This lets
players refer to the object as $<regname> (ie: $mybutton) in @locks, @sets,
etc.

~
@idescribe|@iansidescribe|@ihtmldescribe
@idescribe <object> [=<text>]
@iansidescribe <object> [=<text>]
@ihtmldescribe <object> [=<text>]

Sets the idescription field of <object> to <text>.  If <text> is not
specified, the description field is cleared.  This is the same as '@set
<object>=_/ide:[text]' An idescription is what is seen on the inside of a
vehicle, when a player inside it looks around.
The ansi function sets the iansidescription on an object, and the html
one sets the ihtmldescription on an object.

~
@describe|@ansidescribe|@htmldescribe
@describe <object> [=<text>]
@ansidescribe <object> [=<text>]
@htmldescribe <object> [=<text>]

Sets the description field of <object> to <text>.  If <text> is not
specified, the description field is cleared.  This is the same as
'@set <object>=_/de:[text]'  A description is what is seen when a
player looks at something.
The ansi function sets the ansidescription on an object, and the html
one sets the htmldescription on an object.

~
@credits
@credits

Get a detailed list of credits for the muck server itself.

~
@version
@version

Return the version of the muck.
Eg. Proto1.00 (Muck2.2fb5.55 -- Neon2.17)

~
@tune
@tune
@tune <option>
@tune <option>=<value>

This is used to configure the muck itself; however, it can only be used
by the administration of the muck.  If @tune is typed on its own then
a list of all of the options will be shown. If an option is typed in
and only one option shows up then it will give a description on it, and
if you want more than one match you can put in a '*' or whatever to try
and get multiple matches.
However, if you want to set a value then you must type in the option
and then put in = followed by the value.
Booleans can only be set to no or yes.  Dbref options can be set to
the appropriate object type, or #-1 for nothing.  String options
must be set to something, integer options must have a number, and, lastly,
time options must be set in the appropriate format in the proper order.

~
@dig
@dig <room> [=<parent> [=<regname>]] (Builder only.)

Creates a new room, sets its parent, and gives it a personal registered
name.  If no parent is given, it defaults to the first ABODE room down the
environment tree from the current room.  If it fails to find one, it sets
the parent to the global environment, which is typically room #0.  If no
regname is given, then it doesn't register the object.  If one is given,
then the object's dbref is recorded in the player's _reg/<regname> property,
so that they can refer to the object later as $<regname>.  Digging a room
costs 10 pennies, and you must be able to link to the parent room if
specified.  Only a builder may use this command.

~
@drop
@drop <object> [=<text>]

Sets the drop field of <object> to <text>. If <text> is not specified, the
drop field is cleared.  The drop message on an object is displayed when you
drop it.  On an exit, it is displayed upon entering the destination room. 
On a room, it is displayed when an object is dropped there.  This is the
same as '@set <object>=_/dr:[text]'

~
@fail
@fail <object> [=<message>]

<object> can be a thing, player, exit, or room, specified as <name> or
#<number> or 'me' or 'here'. Sets the fail message for <object>. The message
is displayed when a player fails to use <object>. Without a message
argument, it clears the message.  This is the same as:
'@set <object>=_/fl:[text]'

See @OFAIL and @DESC.

~
@link
@link <object1>=<object2> [; <object3>; ...  <objectn> ]

Links <object1> to <object2>, provided you control <object1>, and <object2>
is either controlled by you or linkable.  Actions may be linked to more than
one thing, specified in a list separated by semi-colons.

~
@odrop
@odrop <object> [=<text>]

Sets the odrop field of <object> to <text>.  If <text> is not specified, the
odrop field is cleared. Odrop on an object is displayed prefixed by the
player's name when s/he drops that object.  On an exit, it is displayed upon
a player's arrival to the destination room (or the location of the
destination player).  On a room, it is displayed when an object is dropped
there, prefixed by the object's name.  This is the same as: '@set
<object>=_/odr:[text]'

See @DROP.

~
@ofail
@ofail <object> [=<message>]

The @ofail message, prefixed by the player's name, is shown to others when
the player fails to use <object>. Without a message argument, it clears the
message. <object> can be specified as <name> or #<number>, or as 'me' or
'here'.  This is the same as: '@set <object>=_/ofl:[text]'.

See @FAIL.

~
@open|@action
@open <exit> [=<object> [; <object2>; ... <objectn> ] [=<regname>]]

Opens an exit in the current room, optionally attempting to link it
simultaneously.  If a <regname> is specified, then the _reg/<regname>
property on the player is set to the dbref of the new object.  This lets
players refer to the object as $<regname> (ie: $mybutton) in @locks, @sets,
etc.  Opening an exit costs a penny, and an extra penny to link it, and you
must control the room where it is being opened.

~
@osuccess
@osuccess <object> [=<message>]

The @osuccess message, prefixed by the player's name, is shown to others
when the player successfully uses <object>. Without a message argument, it
clears the @osuccess message. It can be abbreviated @osucc. <object> can be
specified as <name> or #<number>, or as 'me' or 'here'.  This is the same as
'@set <object>=_/osc:[text]'

See @SUCCESS.

~
@pecho
@pecho <object>=<messageprefix>

Sets the given zombie object's prefix message which will be appended to all
text it sees.

~
@recycle|@destroy
@recycle <object>

Destroy an object and remove all references to it within the database.  The
object is then added to a free list, and newly created objects are assigned
from the pool of recycled objects first.  You *must* own the object being
recycled, even wizards must use the @chown command to recycle someone else's
belongings.
@destroy is an alias for the @recycle command.

~
@stats
@stats [<player>]

This gives a breakdown of each type of object: rooms, exits, things, programs,
players, and garbage.  Wizards may also specify a <player> which returns a
similar display limited to the possessions of <player>.

~
@success
@success <object> [=<message>]

Sets the success message for <object>.  The message is displayed when a
player successfully uses <object>.  Without a message argument, it clears
the message. It can be abbreviated @succ. <object> can be specified as
<name> or #<number>, or as 'me' or 'here'. This is the same as
'@set <object>=_/dr:[text]'

See @OSUCCESS.

~
@trace
@trace <object> [=<depth>]

Starts with <object> and traces all location fields, until the global
environment room is reached or the optional <depth> is specified.  This is
generally useful for finding which rooms are parents in your heirarchy.  If
you cannot link to a particular location its name is replaced by stars ***.

~
@unlink
@unlink <dir>
@unlink here

 Removes the link on the exit in the specified direction, or removes the
drop-to on the room. Unlinked exits may be picked up and dropped elsewhere.
Be careful, anyone can relink an unlinked exit, becoming its new owner.

See @LINK.

~
DROP-TO|DROPTO
Drop-to

When the @link command is used on a room, it sets a drop-to location.  Any
object dropped in the room (if it isn't STICKY) will go to that location. If
the room is STICKY, the drop-to will be delayed until the last person in the
room has left.

~
@ENTRANCES
@entrances [<object>] [= <flags/types> = [<output type>]]

Searches through the database for items that you control linked to <object>.
Flags or types can be specified to check for or against certain ones. (A "!"
before the flag indicates that it is to be excluded.) A "U" in the flags
list indicates an unlinked item.  An "@" will match only objects that have
been unused for more than 90 days.  The output types that can be specified
are owners, links (which outputs either *UNLINKED*, the object to which the
item is linked, or *METALINK* for exits linked to more than one thing),
location and count.

Valid flags:  ABCDHJKLMQSW  Flags E, F, G, P, R, and T will match Exits,
programs, Garbage, Players, Rooms, and Things, respectively.  U will match
unlinked objects.  O will match Old objects unused for longer than 90 days. 
Digits 0 to 8 will match Mucker Levels or Priority Levels. @find =P8 -> the Man

Example:  @entrances here=ED=location
Will list all Dark Exits that are linked to your current location,
giving the location of each one.

See @FIND, @OWNED, and @CONTENTS.

~
@CONTENTS
@contents [<object>] [= <flags/types> = [<output type>]]

Searches the given object for items & exits that match the given flag
string.  Flags or types can be specified to check for or against certain
ones.  (A !  before the flag indicates that it is to be excluded.) A "U" in
the flags list indicates an unlinked item.  An "@" matches only Old objects,
unused for more than 90 days.  The output types that can be specified are
owners, links (which outputs either *UNLINKED*, the object to which the item
is linked, or *METALINK* for exits linked to more than one thing), location
and count.

Valid flags:  ABCDHJKLMQSW  Flags of E, F, G, P, R, and T will match Exits,
programs, Garbage, Players, Rooms, and Things, respectively.  U will match
unlinked objects.  O will match Old objects, unused for more than 90 days. 
Digits 0 to 8 will match Mucker Levels or Priority Levels. @find =P8 -> the Man

Example:  @contents here=DE=owner
Will list all Dark Exits who's source is your current location,
giving the owner of each one.

See @FIND, @OWNED, and @ENTRANCES.

~
@FIND|FIND|@FIND1
@find [<name>] [= <flags/types> = [<output type>]]

Searches through the database for items that you control matching <name>.
Players control only objects they own; wizards control all objects, so @find
searches the entire database when they use it.

Flags or types can be specified to check for or against certain ones.
(A "!" before the flag indicates that it is to be excluded.)  A "U" in
the flags list indicates an unlinked item.  An "@" matches only objects
unused for more than 90 days.  The output types that can be specified are
owners, links (which outputs either *UNLINKED*, the object to which the
item is linked, or *METALINK* for exits linked to more than one thing),
and location. Digits 0 to 8 will match Mucker Levels or Priority Levels.

The matching on names is as follows:
	Individual words can be matched as {word1|word2|...}
	Individual characters can be matched as [abc...]
	A ? matches any character.
	A * matches any number of characters, including none.
	Any of these special charcters can be matched by putting a \ before it.

Type 'help @find2' for more.
~
@FIND2|FIND2

Examples of use:
    "@find north = EU = location" will find all of your unlinked exits named
	"north" and print them along with their locations.
    "@find {big|little} = R!L" finds all your rooms whose names contain "big"
	or "little" and are not LINK_OK.
    "@find w[ei]ll" will find everything you control whose name contains "will"
        or "well."
    "@find =E=links" will list all exits that you control, and display where
        they are linked to.
    "@find button==locations" will list all objects you control with 'button'
        in the name, and it will display where thay are located at.

See @OWNED, @ENTRANCES, and @CONTENTS.

~                            Programming Commands
~
@edit
@edit <program> (Mucker only.)

Allows a mucker to edit a program.  Programs must be created with @program.

See @PROGRAM

~
@list
@list <program>  [=[line1] [-] [line2]]

Lists lines in a program, provided you control it or it is set VIEWABLE. 
No, one, or two line numbers may be specified, denoting the range of lines
to list.  If no lines are given, the entire program is listed.

~
@kill
@kill <processid|playername|programdbref|"all">

If passed a processid (a number without a '#' preceeding it), it will kill
the given process, if the player controls it.  If passed a player name, it
will kill all the processes controlled by that player.  If passed a program
dbref, it will kill all processes that that program is running in.  If the
argument passed is "all", and the player is a wizard, it will kill all
processes on the timequeue.

~
@program
@program <program> (Mucker only.)

Create a new program, or enter edit mode on an existing one.

See @EDIT, @MCP and Programmer's Reference ('man' command).

~
@ps
@ps

Lists the status of the currently running MUF program processes. This lists
all processes for a Wizard.  Non-Wizards only see the muf processes that
they can @kill.

See @KILL.

~
man
man [<subject>] (Mucker only.)

Displays the programmer's manual or a quick reference.

~                          Administrative Commands
~
@boot
@boot <player> (Mage only)

Disconnects a player from the game.  If a player is connected more than once
it affects the most recent connection.

~
@dump
@dump [filename] (Wizard only.)

Only wizards may use this command. Saves the database from memory to disk.
Automatically occurs every three hours, and when @shutdown is used. It does
slow down the server, so only use if you fear a server crash is iminent.  If
a filename is given, it will save the db to that file, and save any
subsequent dumps to it as well.

~
@force
@force <player>=<command>

Causes the game to process <command> as if typed by <player>.  The Man cannot
be forced by anyone.  Wizards can force mortals.  Only the Man can force
wizards.

~
@newpassword
@newpassword <player> [=<password>] (ArchWizard only.)

Changes <player>'s password, informing <player> that you changed it. Must
be typed in full.  Noone can change #1's password.

~
@pcreate
@pcreate <player>=<password> (Wizard only.)

This command creates a new player.

~
@shutdown
@shutdown <message> (ArchWizard only.)

Shuts down the game.  Must be typed in full.  Message required.

~
@frob|@toad
@frob <player1> [= <player2>] (ArchWizard only.)

Turns <player1> into a slimy toad, destroying their character. All
possessions of <player1> are @chowned to <player2>. Must be typed in full.
If recycle_frobs is @tuned on, the frobbed object is instantly recycled.
@toad is an alias for the @frob command.

See @PURGE.

~
@usage
@usage (Mage only.)

Gives system resource usage stats for the muck server process.

~
@wall
@wall <message> (Mage only.)

Shouts something to every player connected. Must be typed in full.

~
@purge
@purge <player>=yes (ArchWizard only.)

Recycles all objects owned by that player, but leaves the player. You must
specify 'yes' in order for this to take.

WARNING: Make sure the player owns no public rooms or areas.

See @FROB.

~
@hopper
@hopper (Wizard only.)

This controls the automatic email registration of new players that ask for a
character using the 'register' command at the connection screen.  A basic
list of commands is available with '@hopper help'.  To use most of the
commands, the wizard must be registered as the registration wizard with
'@tune reg_wiz=me'.

~
@fixwizbits
@fixwizbits Convert Mucker Levels (The Man only.)

Converts an M3+W muck to an M3+W3 muck (from 4 to 7 mucker/wizard levels.)
To use this command, you must be #1, type the full command, and M3 according
to the new level scheme.  (Old just W bit, no M2/M3 set on player.)

NOTE: Only do this command once!!! *points to @armageddon for the non-heeding*

See newlevels.

~                                Object Flags
~
COMMAND
COMMAND

The new COMMAND flag is not used yet at this time and is left for future
plans with the ProtoMUCK server.  See this space in another major, major
release of the server.

~
GUEST
GUEST

If a player is set GUEST then this player has become a guest character and
must abide by all of the rules of a guest.  The guest character loses
access to many options and programs, can not enter rooms with a guest flag,
can not run/go through actions/exits that have the guest flag set, and
can not change anything on themselves.  This makes things easier on the
administration so that they do not need to manualy block out all of the
commands that they don't want a guest to have.

~
LOGWALL
LOGWALL

The LOGWALL flag allows wizard characters to watch the connection and
status logs; however, it will not reveal player passwords to them so do
not worry about any kind of security issues.  This flag is merely for
the paranoid or caucious.

~
ABODE|AUTHOR|AUTOSTART
ABODE

If a room is set ABODE, players can set their homes there, and can set the
homes of objects there. (LINK_OK is now used only for exits, and ABODE is
for players and objects.)

When set on a program, it means AUTOSTART.  This means that when the game is
first started up, the program will automatically be run with a trigger of
#-1 and a 'me @' of the owner of the program.  This is useful to restart
processes that run in the background periodically.
~
BOGUS|PSEUDO|PSUEDO
Bogus Commands

Bogus commands can be made using exits. For example, to make a 'sit'
command, one could "@open sit", then "@link sit=here" (because unlinked
exits can be stolen), "@lock sit=me&!me" (impossible to be both at once,
therefore always fails), and "@fail sit=You sit on the chair."; "@ofail=sits
on the chair.".  Since nobody can go through it, it always fails. The @fail
message is displayed to the player, and the @ofail message (preceded by the
player's name) to everyone else.

~
BUILDER|BUILDERS
BUILDER

Some mud restrict building commands to players whose builder flag is set.
The builder flag, BUILDER, is only meaningful for players. On such
systems, only builders can @create, @dig, @link, @open, or pick up
unlinked exits. Only a wizard can set this flag.

When BUILDER is set on a program, it is called "BOUND" and it causes any
functions within the program to run in preempt mode, regardless of the
multitasking mode that the process had before calling this program.  When
the execution exits this program, the multitasking mode returns to what
it was before the function was called.  This lets libraries of atomic
functions be written.

~
CHOWN_OK|COLOR_ANSI|COLOR_ON|COLOR_OK
CHOWN_OK

When set, this flag indicates that any player may use the @chown
command to claim ownership of the item.

When set on a player, it enables ansi color on mucks that support it.

See @CHOWN.

~
DARK|DEBUG
DARK

If a room is DARK, then when people besides the owner 'look' there, they
only see things they own. If a thing or player is DARK, then "look" does not
list that object in the room's Contents:. Players can set rooms they own
dark, and may also set objects they own dark, but they cannot drop dark
objects in rooms they don't control.

When a program is set DARK, it is called DEBUG, and a running stack trace is
printed out to any users of the program for each instruction executes.
~
HAVEN|HARDUID|HIDE
HAVEN

If a player is set HAVEN, he cannot be paged.

When set on a program, HAVEN is called HARDUID, and causes that program to
run with the permissions of the owner of the trigger, rather than with the
permissions of the user of the program.

When this is set in conjunction with the STICKY (SETUID) flag on a program,
and the program is owned by a wizard, then it will run with the effective
mucker level and permissions of the calling program.  If the caller was not
a program, or the current program is NOT owned by a wizard, then it runs
with SETUID permissions.

If a container object is set HAVEN it will be called HIDE and will not show
the objects within itself.

~
MUFCOUNT
MUFCOUNT

If this is set on a program then it will set extra information on the muf
program upon the program object whenever it runs.

~
MOBILE|OFFER
MOBILE

There is currently no function for this flag. It will be decided on what to
do with the flag, or if we should take it out later on.

~
EXAMINE_OK
EXAMINE_OK

If any object-type is set EXAMINE_OK then it can be examined by any other
player.  This is a useful flag for helpstaff that do not have any sort of
a wizard flag set on themselves.

~
JUMP_OK
JUMP_OK

The Jump_OK flag is used in several ways.  Unprivileged programs cannot
use MOVETO on an object unless the player either controls the object, the
room it's being moved from, and the room it's being moved to, or else they
are set Jump_OK.  A player cannot use an action that is linked to another
player unless the other player is set Jump_OK.  On some systems, where
SECURE_TELEPORTing is set up, you cannot use an action to leave a room,
unless the action is either attached to that room, or the room is JUMP_OK.

~
PARENT|PROG_DEBUG
PARENT

The PARENT flag will allow a room to be used as a parent room by any
player; however, it does not act like the ABODE flag in the way that
it lets things or players set it as their home.
 
To set the parent room for another room object you type:
@teleport <room>=<parent room>
The parent room must be set either ABODE or PARENT for this to work.

If a program is set PARENT then the flag becomes PROG_DEBUG, and if
it is ran in conjunction with the DEBUG flag set on it then it will
send the debugspam to the owner if the user does not see it; however,
the backtrace will be revealed to the owner no matter what happens if
the PROG_DEBUG flag is set.
However, if set on a player then it is also called PROG_DEBUG,
except this will allow normal players that do not own the program to
see the debug spam.  No more having to set a player as DEBUG for
this to be able to occur.

~
LINK_OK|LIGHT
LINK_OK

If a room is LINK_OK, anyone can link exits to it (but still not from it).

If a thing, player, or exit is set LINK_OK it is called LIGHT.  The flag
conterattacks against DARK in this situation.

A program that is link_ok can be called by any other program, and can be run
from actions and propqueues not owned by the owner of the program.

See @LINK.

~
HIDDEN
HIDDEN

A new DARK flag concept.  The HIDDEN flag will remove upon reconnect, but
can only be set/unset by wizards on a player object.  However, the easiest
way for a wizard to use this is by connecting with the new connection
command:
ch <username> <password>

~
STICKY|SETUID
STICKY

If a thing is STICKY, it goes home when dropped.

If a room is STICKY, its drop-to is delayed until the last person leaves.

If a player is STICKY (SILENT), they don't see the dbrefs on things they
own, and they do not see dark objects.

If an exit is linked to a Thing, and it is located on another Thing, then if
the exit is not STICKY, the Thing the exit is located on will go home when
the exit is triggered.

If a program is STICKY (SETUID) it runs with the permissions of the owner of
the program, not the perms of the user.

See HOMES and DROP-TO.

~
vehicle|viewable
VEHICLE or VEIWABLE

Objects of TYPE_THING, that have the VEHICLE flag set, can contain players. 
To enter a vehicle, you can either use a MUF program to teleport you to it
via MOVETO, you can get a wizard to @teleport you into it, or else you an
use an action that is both attached and linked to the vehicle to enter it. 
This means that you can only enter a vehicle from the same room that it is
in, and you cannot use far links to enter it.  This prevents the use of
vehicles to get around locks.  Inside the vehicle, you will see it's @idesc,
instead of it's @desc, and you will not be shown it's @succ or @fail. 
Objects dropped in a vehicle will not go away to the their homes, as a
vehicle cannot have a dropto set in it.

Things with the VEHICLE flag set cannot enter rooms or use exits that have
the VEHICLE flag set.  This allows a way to prevent vehicles from entering
areas where it would be illogical for them to be.

Programs set VIEWABLE can be @LISTed by any mucker.

~
PROTECT
PROTECT

The PROTECT flag is a bit complicated but it is used to keep your objects
protected, or for W4 admin to keep things of theirs from being viewed by
others.
If the PROTECT flag is set on basicly anyones object it will not be able
to be changed in any way unless a MUF program is used to do so (and the
MUF program is owned by someone of a higher or equal Wizard level, if
you are a wizard).  The only change a normal player can make is unsetting
or resetting the PROTECT flag.
If the PROTECT flag is set on a W4 admins object than no lower wizard
level can access the objects information in any form.  W3 or lower admin
can not even @list the program unless it has a VIEWABLE flag set on it.
If the PROTECT flag is set on a W4 admin himself then no object can be
@chowned away or to the level in order to make sure that nobody abuses
the powers that the admin may have.
There is a way to counter-attack against the PROTECT flag: If a wizard
is set ANTIPROTECT then he/she can make programs that will not be effected
by this flag.

See the ANTIPROTECT flag also.

~
PUEBLO
PUEBLO

The PUEBLO flag signafies that someone has the ability to use pueblo.

~
HTML
HTML

The HTML flag signafies that someone has somewhat HTML capability, but
not on the level of what Pueblo has support for.

~
ANTIPROTECT
ANTIPROTECT

The ANTIPROTECT flag is used on W3 admin so he or she may be able to make
MUF programs that will not be effected by the new PROTECT flag.  Set your
coder admin ANTIPROTECT unless you are unsure you can trust this individual
enough.

~
WIZARD
WIZARD

The normal WIZARD flag is slightly different under ProtoMuck.  See
help 'newlevels' for more information.

~
QUELL
QUELL

A wizard set QUELL is effectively a normal player with no wizardly powers.
Programs that test to see if a player is wizard will get a false response
from '"wizard" flag?' when the player is QUELLed.  Wiz-bitted programs will
still act wizbitted whether or not the owner is QUELLED.

~
SILENT
SILENT

A player can set themselves "SILENT" and not see all the dbrefs and dark
objects that they own.  They won't see objects in a dark room either.
They still control the objects though.  Silent is the same flag as STICKY.

~
ZOMBIE|PUPPET
ZOMBIE

@force and the FORCE muf primitive can be used on objects of type THING, if
they have the ZOMBIE flag set.  Objects act as if they have the permissions
of their owner.  If an object is locked against a player, it will also be
locked against anything that that player owns, that tries to test the lock.

Things with the ZOMBIE flag set cannot enter rooms or use exits that have
the ZOMBIE flag set.  This allows a way to prevent zombies from entering
areas where they are not wanted.

If you try to run a program that you control, that has its ZOMBIE flag set,
it will drop you into the MUF debugger.  This lets you step line by line, or
instruction by instruction through a muf program, setting breakpoints to
stop at, and other nice things.  There is help available within the
debugger, via the 'help' command.

~
XFORCEABLE
XFORCEABLE

In order for an object to be able to be forced by some programs, it will
need to have this flag set and the force lock key (see @flock) set to
something passable.

~                               Miscellaneous
~
COMMANDS
User Commands

All sorts of commands are available to players. Common ones are listed by
typing 'help'; you can get a listing of all commands by typing 'help index'
and learn about each one with 'help <command>' as needed. Since exits can be
given the same name as commands, this can be confusing to beginners.

All @ commands are caught before exits are checked, however, as well as WHO,
QUIT, OUTPUTPREFIX, OUTPUTSUFFIX, and home. Also, some areas may have more
commands available in them. See BOGUS.

~
Control of Objects|control
Control of Objects

There are 5 rules to controlling objects:

1) You control anything you own.
2) A wizard or the Man controls almost everything.
3) Anybody controls an unlinked exit, even if it is locked.
   Builders should beware of 3, lest their exits be linked or stolen.
4) Players control all exits which are linked to their rooms, to
   better facilitate border control.
5) If an object is set CHOWN_OK, anyone may @chown <object> and gain
   control of the object.

However, the new PROTECT flag may change some of these rules.

See PROTECT, CHOWN_OK and @CHOWN.

~
failure
Failure

You fail to use a thing when you cannot take it (because it's lock fails).
You fail to use an exit when you cannot go through it (because it's unlinked
or locked). You fail to use a room when you fail to look around (because
it's locked).

See STRINGS, @FAIL and @OFAIL.

~
flags

The flags are displayed as letters following an object's ID number.  Flags
are set with the @set command.

The flags are:  W(izard), S(ticky), L(ink_OK), D(ark), J(ump_OK), G(uest),
C(hown_OK), H(aven), A(bode), B(uilder), V(ehicle), and Z(ombie).

The second set of flags are:
G(uest), !(Logwall), +(Mufcount), O(Mobile), %(Parent), *(Protect),
I(Antiprotect), &(Examine_Ok), N(Command), #(Hidden), $(Pueblo), &(HTML)

The flags R(oom), F(Program) E(xit), and P(layer) are also used.

Debug is the same flag as Dark, Silent as Sticky, and Bound as Builder. (F)
refers to a Muck Forth program.  An M followed by a 1, 2, or 3 gives the
Mucker Level.  (Priority Level for exits.)  A W followed by a 1, 2, 3, 4
or 5 gives the Wizard Level.

index5 contains more help about flags.

~
gender|sex|species
Gender

How to set your sex: (this is your physical gender not sexual preference)

@set me=sex:          To clear your sex
@set me=sex:male      If you're a guy
@set me=sex:female    If you're a gal
@set me=sex:neuter    If you're undecided

You can also select a species with '@set me=species:...'.
(Bear, raccoon, beaver, fish, fox, merfolk, etc.)

If a player's sex is set, %-substitutions will use the appropriate pronoun
for that player.

See SUBSTITUTIONS.

~
God|#1|omnipotent
God

On most mucks, #1 is the system maintainer or 'God' character.  (No, this isn't
a hidden thesis on religion.) Only #1 can set a player Wizard.  Wizards cannot 
affect #1.

See WIZARD.

~
here
here

The word 'here' refers to the room you are in.

For example, to rename the room you're in (if you control it), you could
enter "@name here=<new name>".

~
homes
Homes

Every thing or player has a home. This is where things go when
sacrificed, players when they go home, or things with the STICKY flag
set go when dropped (See STICKY). Homes are set with the @link
command. A thing's home defaults to the room where it was created, if
you control that room, or your home.

You can link an exit to send players home (with their inventory) by "@link
<dir>=home".  Drop-tos can also be set to 'home' (See DROP-TOS). @teleport
accepts home as an argument, so you can @teleport things (and players if you
are a wizard) to their home.

See @TELEPORT and @LINK.

~
linking
Linking

You can link to a room if you control it, or if it is set LINK_OK or ABODE.
Being able to link means you can set the homes of objects or yourself to that
room if it is set ABODE, and can set the destination of exits to that room if 
it is LINK_OK. See LINK_OK, ABODE, and @LINK.

~
newbie|new|me
Newbie Advice

Some things to do when starting out:  (Don't type the ''s nor <>s.)

     1) Give yourself a description with '@desc me=<description>',
        then look at yourself with 'look me'

     2) Set your description: '@desc <object>=<description>'

     3) Set your gender with '@set me=gender:male' or '@set me=gender:female'
        (or '@set me=gender:neuter' to be an'it)

     4) Change your password from the one given when you first connected with
        '@password <oldpassword>=<newpassword>'

     5) Long, descriptive poses in Roleplaying are very good.  Bumping up the
        buffer by three times promotes more descriptive poses.

~
Mucker Levels|0|1|2|3|M0|M1|M2|M3|Priority Levels|Levels1
Mucker Levels (Priorities and Permissions)

The mucker level of a player or program specifies whether or not a player
can make MUF programs, and what permissions they will have when the programs
are run.  (See 'man mucker levels')  Only a wizard may set the mucker level
of a player, and a normal player may only set the mucker level of programs
they own to less than their current mucker level.  A program cannot be set
to mucker level 0, since it doesn't mean anything.

When the mucker level of an exit is set, is it called the exit's priority
level.  The priority levels let you specify that certain exits are not
overidable by local actions.  When an exit is searched for, in the
matching routines, it will match like it used to, except that if it finds
an exit, later in the search order, that has a higher priority level, it
will choose that exit instead.

You can set the priority level of an exit by setting its Mucker Level.
(ie: @set exit=2)  A level of 0 is the lowest priority, and a level of 3
is the highest priority.  Only a Wizard can set the priority level of an
action or exit.

Type 'help levels2' for more help on mucker levels.

~
levels2|priority levels2|mucker levels2

When the server looks for the standard "connect", "disconnect", or "look"
actions, it will ignore any actions with a priority Level of 0.  When an
action is @attached to another object, @named to something else, or
@unlinked, its Priority Level is reset to 0.

If COMPATIBLE_PRIORITIES is #defined on your system, then exits that are
on room or player objects will never act as if they have an effective
priority level of less than 1.

See newlevels.

~
dbref|number|objref
DBRef

Each object has an ID number (the 'dbref'), which appears after the name of
an object, and is followed by any flags on the object; i.e. foo(#3672P) is
a Player, named foo, with dbref #3672. This number is a database reference,
and is used to specify objects at a distance.

ex #<room ID number>

You will only see the ID number of objects you own, or which are set
LINK_OK, ABODE, or CHOWN_OK. Wizards can see the numbers and flags on all
objects.

See also FLAGS.

~
objects
Objects

You can specify objects (things, players, exits, and rooms) by name if
they're in your inventory or in the same room as you. You need only type
enough letters of the name to be unambiguous. You can also specify objects
anywhere by their ID numbers, in the form #<number>. Players in other rooms
may be specified in the form *<player name>. The keywords 'me' can be used
for yourself, and 'here' for the room you're in.

See TYPES.

~
outputprefix
OUTPUTPREFIX [string]

Must be in all capitals, and typed in full.  Prints the given line before
the output of every command, setting them apart from other messages.

See OUTPUTSUFFIX.

~
outputsuffix
OUTPUTSUFFIX [string]

Must be in all capitals, and typed in full. Prints the given line after the
output of every command, setting them apart from other messages.

See OUTPUTPREFIX.

~
strings
Strings

Objects have several standard strings (Lucky 13):

@name      1) a name.
@desc      2) a description.
@htmldesc  3) an html description (for web/pueblo users).
@ansidesc  4) an ansi description.
@idesc     5) an inside description (for vehicles).
@ihtmldesc 6) an inside html desc (for web/pueblo users).
@iansidesc 7) an inside ansi description.
@succ      8) a success message (seen by the player).
@fail      9) a fail message (seen by the player).
@drop     10) a drop message (seen by the player).
@osucc    11) an osuccess message (seen by others).
@ofail    12) an ofail message (seen by others).
@odrop    13) an odrop message (seen by others).

See properties.

~
Substitutions|pronouns|pronoun_subst|pronoun substitution|%a|%s|%o|%p|%r|%n
Pronoun Substitution

@osuccess, @ofail, and @odrop messages may contain %-substitutions,
which evaluate to gender-specific pronouns if the player's sex is
set. They are:

    %a (absolute)       = Name's, his, hers, its.
    %s (subjective)     = Name, he, she, it.
    %o (objective)      = Name, him, her, it.
    %p (possessive)     = Name's, his, her, its.
    %r (reflexive)      = Name, himself, herself, itself.
    %n (player's name)  = Name.

Capitalized pronouns are also available with %A, %S, %O, %P, and %R.
If you need a '%', use %%.

Note: Please do not confuse the MUCK %r with the MUSH %r.  MUCKs use \r
for returns instead of %r.

Example:  @ofail teapot=burns %p hand on the hot teapot.

See GENDER.

~
success
Success

You successfully use an object when you take it. You use an exit
successfully when you go through it. You successfully use a room
when you look around.

See STRINGS, @SUCCESS and @OSUCCESS.

~
timestamps
Timestamps

Every object has a timestamp, which includes the time last used, the time
last modified, the time the object was created, and the number of times that
that object has been used by a player. They are shown by using EXAMINE.
'Usage' is defined as follows: Players-when they are connected, Rooms-when
entered or 'look'd at, Exits-when invoked (by a 'go' command) or 'look'd at,
Things-when 'look'd at or 'take'n/'drop'd, Programs-when run by a player.
Examining an object does not count as looking at them.

~
object types|types
Types of Objects

There are 5 types of objects: things, players, exits, rooms, and programs.
The first letter following an object's ID number indicates the type:
P(layer), E(xit), R(oom), otherwise, thing.

Things are inanimate objects that can be carried.  Players are animate
objects that can move and carry. Exits are the means by which objects move.
Rooms are locations that contain objects and linked exits. Programs are
player-written extensions to the game.

~
PROPDIRS|PROPDIRS1
Propdirs (Property Directories)

Properties are stored on objects, and organized into directories of
properties.  This speeds things up, and keeps you from being spammed on
examines.  To examine the properties on an object, use 'ex <obj>=<propdir>'. 
where to examine the base properties in an object, <propdir> would be '/'. 
You can see the value of a single property with 'ex <object>=<propname>'.

Propdirs are a method of storing and organizing properties to speed access
and to provide a sort of built-in organization.  The basic idea is to make
something similar to a 'filesystem' for properties.  In this analogy, each
person would be a filesystem, with a root directory and (theoretically) an
infinite number of properties beneath that.

A property has been expanded with the idea that each property may now
contain a new property list -- the 'propdir'.  properties can both have a
value (either integer or string as before) _and_ contain other properties.

The actual directory entries may ALSO contain data.  Propdirs' only real
'visible' changes are in the names of properties -- '/' is used as the
property directory separator, and so will not appear in the names of the
properties when listed through 'examine' or MUF programs.

Type 'help propdirs2' for more help.

~
PROPDIR2|PROPDIRS2

Property protections have also been expanded -- the . and _ may appear
either at the beginning of the property name or immediately following a '/',
and that property will have the appropriate protections.  For example, the
property '/mail/.inbox/mesg/#' would have the same protections as '.mesg#'
would now.

There are two ways to remove a property list:

* First, and most straight forward, is to remove the property that contains
  it.  so, in the previous example, removing the property '/mail/.inbox'
  would (recursively) remove all properties under .inbox before removing
  .inbox itself.

* The second way is to remove all properties within the property list
  yourself.  When the last property is removed, the parent property (the one
  that contained the property list) is examined to see if contains data.  If
  it does, then the property list only is removed.  If the property doesn't
  contain data then it is removed also.

Type 'help propdirs3' for more help.

~
PROPDIR3|PROPDIRS3

Because of the first method of removing propdirs, the ability to have a
property list and value in the same property should be used sparingly.

If you try to access a property ending in '/', in MUF, it will give a
programmer error, except in NEXTPROP, in which it will give the name of the
first property in that propdir.

The last visible, non-MUF change that propdirs bring is that 'examine' will
no longer show properties _directly_.  Instead it will say:

  "[ Use 'examine <object>=/' to list root properties. ]"

Examine now can take an argument which is the property or propdir to view. 
If the property name given ends with a '/', all properties in property
directory will be listed, otherwise the single property named will be shown.

Type 'help propdirs4' for more help.

~
PROPDIR4|PROPDIRS4

'addprop' will no longer allow a ":" in the property name.  To clear a
propdir's value without deleting the proptree below it, from MUF do a
'"" 0 addprop' to it.

A property can *not* have both a string and integer stored at the same
time anymore.  The old property.c was lax and allowed this, even though
the integer value would be lost on dbload.

Type 'help propdirs5' for an example.

~
PROPDIR5|PROPDIRS5

Property and Propdir Usage Examples:
  Lines indented only 2 spaces are what the user is typing.
  Lines indented 6 spaces are what the MUCK is returning to the user.
  Lines in []'s are comments on what's going on.

  [first, lets set up a bunch of properties]
  @set me=first:a property.
  @set me=second:another property.
  @set me=first/one:A property in a propdir
  @set me=first/two:Another property in a propdir
  @set me=third/prime:three

  [Okay, now lets see what properties we have.  We use the examine command
   to do that, with a second argument, to tell it what we want to list in
   the way of properties.  In this case, since we want to list the base level
   properties, we use '/'.]

  ex me=/
      first/: (string) a property.
      second: (string) another property.
      third/: (no value)

Type 'help propdirs6' for more.

~
PROPDIR6|PROPDIRS6

  [Okay, it has a few properties with the first part of the names of the
   properties that we set.  The /'s at the end of some of the property
   names means that there are sub-properties that we can list.  When we
   set a property like 'first/one', it's actually creating a sub-property
   named 'one' beneath a property named 'first'.  If 'first' doesn't
   already exist, then it will create that property.  Let's list what
   sub-properties we created under 'first'.]

  ex me=first/
      first/one: (string) A property in a propdir.
      first/two: (string) Another property in a propdir.

  [Here we see the properties that we set as sub-properties under 'first'.
   We examined for 'first/' to list the sub-properties.  The / at the end
   of the name tells the game that we want it to list the sub-properties
   of that property, and not that property's value itself.  Lets see what
   value the property 'first' has, itself.  To do this we leave off the '/']

  ex me=first
      first/: (string) a property.

Type 'help propdirs7' for more.

~
PROPDIR7|PROPDIRS7

  [Okay, lets say that we just want to see the value of the sub-property
   named 'one', under the property 'first'.  We can list it as follows:]

  ex me=first/one
      first/one: (string) A property in a propdir.

  [If the property or sub-property that you specify does not exist, it
   will complain about it.]

  ex me=first/three
      No property found.

  [if a property was created to contain a sub-property, but was never given
   a value itself, it is listed as having no value.  It has sub-properties,
   however.]

  ex me=third
      third/: (no value)

Type 'help propdirs8' for more.

~
PROPDIR8|PROPDIRS8

  [Let's list those sub-properties.]

  ex me=third/
      third/prime: (string) three

  [Okay, let's delete the sub-property 'prime', from under the property
   'third'.  To do this, we act like we are setting the variable again,
   except that we are giving it no value this time.]

  @set me=third/prime:
  ex me=third/
      No properties listed.

Type 'help propdirs9' for more.

~
PROPDIR9|PROPDIRS9

  [There.  It's gone.  Now let's list the bottom level properties again.]

  ex me=/
      first/: (string) a property.
      second: (string) another property.

  [Whoops!  The property 'third' is gone too!  This is because properties
   with no values are automatically deleted when their last sub-property
   is deleted.  Let's delete a subproperty from 'first', now.]

  @set me=first/one:
  ex me=/
      first/: (string) a property.
      second: (string) another property.

Type 'help propdirs10' for more.

~
PROPDIR10|PROPDIRS10

  [The property 'first' still exists, with it's string value, and it still
   has sub-properties.  Lets list those.]

  ex me=first/
      first/two: (string) Another property in a propdir.

  [Here we see that the sub-property 'one' is gone, as we expected.  Let's
   see what happens when you erase a property that has sub-properties.]

  @set me=first:
  ex me=/
      second: (string) another property.

  [The property 'first' is gone.]

  ex me=first/
      No properties listed.

Type 'help propdirs11' for more.

~
PROPDIR11|PROPDIRS11

  [And the subproperty it had is gone too!  Let's remake the 'first' prop.]

  @set me=first:again, a property.
  ex me=/
      first: (string) again, a property.
      second: (string) another property.

  [We have two properties again, and no sub-properties.  It should be
   noted that sub-properties can have sub-sub-properties, and they can
   contain even subbier properties, and so on and so forth.]
  @set me=first/one:uno
  @set me=first/one/example:dos
  @set me=first/two/example:tres
  @set me=first/one/example/cat:meow
  ex me=first/
      first/one/: (string) uno
      first/two/: (no value)
  ex me=first/one/
      first/one/example/: (string) dos
  ex me=first/one/example/
      first/one/example/cat: (string) meow

Type 'help propdirs12' for more.

~
PROPDIR12|PROPDIRS12

  [There is a special case in examine to let us list ALL the properties and
   sub-properties of a prop.  To use it, we just specify '**' as a propdir.
   For example, to list all sub-properties and sub-sub-properties, etc.,
   under 'first', you would do the following:]

  ex me=first/**
      first/one/: (string) uno
      first/one/example/: (string) dos
      first/one/example/cat: (string) meow
      first/two/: (no value)
      first/two/example/: (string) tres
      
  [Let's delete all the properties on the object, now.  To do that, we
   specify no property name or value when we use @set.  Nothing but a
   colon.]

  @set me=:
  ex me=/
      No properties listed.

  [All gone!]

~
NEWLEVELS|NEW LEVELS|M4|M7|MUCKER7
New Level System

The new M9 system consists of an MPI level, 3 Mucker levels, 5 Wizard levels,
and of course, the Man.  The Builder flag is separate from Mucker levels.

0 -- Player     (  )  No MPI or Muf abilities.
1 -- Meeper/MPI ( M)  Can parse {mpi} commands.
2 -- Mucker1    (M1)  Old M1, muf restricted to local access, 20k inst limit.
3 -- Mucker2    (M2)  Old M2, general muf level, 80k inst limit.
4 -- Mucker3    (M3)  Old M3, 320k inst limit.
5 -- Mage       (W1)  More feeps in the outside world, see 'magefeeps'.
                      W1 is similar to the 'royalty' flag on Mushes.
                      W1 is needed for muf connection prims and multiple
                      object creations as well as unlimited instructions.
                      A W1 admin is like an advanced coder and limited
                      staff member.
6 -- Wizard     (W2)  General wizard level. For most wizards.
7 -- ArchWizard (W3)  Level for head-wizards (head-coder, head-@pcreator).
8 -- The Boy    (W4)  For co-head wizards or server wizards.
9 -- The Man    (W5)  Mr. Omnipotent himself. Also known as char dbref #1.

Only W5 or W4 admin can set or change a player W2 or W3 but W2 or W3 can set
other players from M0 to W1.  Only W5 admin (char #1) can set or change the
W4 flag on other players.  Anyone can set things/programs/rooms/exits to
their mucker level (except W5, which is only set on char #1).

To convert a db's mucker system from M4 to M8, the Man can use @fixwizbits.
M8 is 100% compatible with the M9 system.

The requirement for the MPI flag can be turned off (and usually is) at 
compile time.  This will eventually be changed to a @tune option.

~
MAGES|MAGEFEEPS|MAGE FEEPS
Mages

Can examine any object. (But not list props with ex thing=/...)
Can @boot Mortals.  (Wizards can't boot each other, only #1 can.)
Can use ! to override local action/exits.
Can set/clear the motd and read gripes by typing 'gripe'.
Can do @delta (but not regular) dumps of the db.
Not affected by max_mortals for logging in.
Not affected by @/id, @/lockout-msg, @/suspend-until, and @/suspend-msg.
Give/rob/kill can do anyone anywhere and always succeed, infinite pennies.
Can @name players, even with wiz-rename, no password needed.
Can @wall, be paged by Guests, can't be @frobbed, @purged, or @forced.
Can see @stats of anyone.
Can @set Builder, Guest, Vehicle, and Zombie flags on things they control.

A Mage is a level 1 wizard (W1) that is basicly a staff member.

See newlevels, wizards, and archwizards.

~
WIZARDS|WIZARDFEEPS|WIZARD FEEPS
Wizards

Wizards are essentially ArchWizards except for a few system-critical functions
being disabled, namely @armageddon.

See newlevels, archwizards, and mages.

~
@armageddon
@armageddon <message> (ArchWizard only.)

Shuts down the game without saving.  Must be typed in full.  Message required.

~
ARCHWIZARDS|ARCHWIZARDFEEPS|ARCHWIZARD FEEPS|ARCH WIZARDS|ARCH WIZARD FEEPS
Archwizards

Archwizards are the highest level a player can be set without being object
#1.  Only #1 can set or remove Archwizard bits.  #1 is also an ArchWizard
in power even if he has no such bit set.

Only ArchWizards can @armageddon, @shutdown, and @tune.
@tune also may disable some other features from Wizards.
Only ArchWizards can read @/prop hidden properties.

See also newlevels, wizards, and mages.

~
WIZCHAT
Wizchat ?        (Show who is on wizchat)
Wizchat #<spoof>
Wizchat :<pose>
Wizchat <message>

This is an internal wizchat program, though can easily be replaced.

~
dwall
dwall <descriptor or online player>=<message>

Send a message to the given descriptor.

~
dinfo
dinfo <descriptor or online player>

Get descriptor and host information on the given player or descriptor.

~
dboot <descriptor or online player>

Boot the given player or descriptor off the muck.

~
@conlock
@conlock <object>=<container lock>

Locks a container from or to players or objects.

~
@flock
@flock <object>=<force lock>

Makes sure that only certain players or objects can @force the given
object or player.

~
@doing
@doing <doing string>

Sets a 'Doing...' message for the WHO screen for your own self.

For administrators: If you set a message on the prop '_poll' on room
#0, then the 'Doing...' string will change to what you type there.

~
@restart
@restart <message>

Restarts the muck.  Must be typed in full.  Message required.
~
ANSI|COLOR
ANSI or COLOR

ProtoMUCK servers have support for three different ansi standards at
this time.  However, they are coded through the use of softcode.  The
three supported formats are: STANDARD, NEON (or GLOW), and MUSH.
To allow yourself to see ansi colors type: @set me=COLOR
To turn off ansi colors type: @set me=!COLOR

See also @SET, COLOR_ANSI, STANDARDANSI, NEONANSI, MUSHANSI

~
STANDARDANSI|STANDARD ANSI
Standard ANSI

Standard ANSI support is taken from the new Fuzzball distribution (FB6.xx)
for future compatability reasons.  It is just the normal, standard ansi
format that makes \[ as the escape code.
Eh. \[[1m makes the color bold.
To see more of an explanation type: man standard ansi

~
NEONANSI|GLOWANSI|NEON ANSI|GLOW ANSI
Neon ANSI / Glow ANSI

The ANSI colors from the NeonMUCK distribution is kept as a major part
for backwards compatability reasons.  To see more information on this
ansi standard for mucks please type: man neon ansi

~
MUSHANSI|MUSH ANSI
MUSH ANSI

This ANSI set is taken from the MUSH/MUX servers for those that are used
to that ansi standard set.  It is perhaps the easiest one to learn,
understand, and takes the least time to type.

To get more information please type: man mush ansi

~
WWW
Web Support

Some ProtoMUCK sites have web support installed along with a few default
programs.  If one or two of the default programs are installed into the
server then you may be able to setup your own mini-webpage off of the
muck itself.  On the majority of sites, the web port is one port under
the normal non-pueblo telnet port; however, some sites may have it on
another port and if they do the admiinistration should have the site
posted up somewhere on the MUCK.
If your MUCK has support for personal webpages, then you may type the
following to get your own webpage:
lsedit me=_/www
That will create a page at the following address:
http://<site address>:<web port>/~<character name>

Pretty simple, isn't it?

